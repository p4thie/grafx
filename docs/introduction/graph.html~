<!doctype html>
<html class="no-js" lang="en" data-content_root="../">
  <head><meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width,initial-scale=1"/>
    <meta name="color-scheme" content="light dark"><meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="index" title="Index" href="../genindex.html" /><link rel="search" title="Search" href="../search.html" /><link rel="next" title="Differentiable Processors" href="processors.html" /><link rel="prev" title="GRAFX" href="../index.html" />

    <link rel="shortcut icon" href="../_static/favicon.ico"/><!-- Generated with Sphinx 7.4.7 and Furo 2024.07.18 -->
        <title>Audio Processing Graphs - GRAFX Documentation</title>
      <link rel="stylesheet" type="text/css" href="../_static/pygments.css?v=a746c00c" />
    <link rel="stylesheet" type="text/css" href="../_static/styles/furo.css?v=613ab9ff" />
    <link rel="stylesheet" type="text/css" href="../_static/styles/furo-extensions.css?v=302659d7" />
    <link rel="stylesheet" type="text/css" href="../_static/css/custom.css?v=a6743078" />
    
    


<style>
  body {
    --color-code-background: #f8f8f8;
  --color-code-foreground: black;
  
  }
  @media not print {
    body[data-theme="dark"] {
      --color-code-background: #202020;
  --color-code-foreground: #d0d0d0;
  
    }
    @media (prefers-color-scheme: dark) {
      body:not([data-theme="light"]) {
        --color-code-background: #202020;
  --color-code-foreground: #d0d0d0;
  
      }
    }
  }
</style></head>
  <body>
    
    <script>
      document.body.dataset.theme = localStorage.getItem("theme") || "auto";
    </script>
    

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  <symbol id="svg-toc" viewBox="0 0 24 24">
    <title>Contents</title>
    <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024">
      <path d="M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1a8.74 8.74 0 0 0 0 13.8z"/>
    </svg>
  </symbol>
  <symbol id="svg-menu" viewBox="0 0 24 24">
    <title>Menu</title>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather-menu">
      <line x1="3" y1="12" x2="21" y2="12"></line>
      <line x1="3" y1="6" x2="21" y2="6"></line>
      <line x1="3" y1="18" x2="21" y2="18"></line>
    </svg>
  </symbol>
  <symbol id="svg-arrow-right" viewBox="0 0 24 24">
    <title>Expand</title>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather-chevron-right">
      <polyline points="9 18 15 12 9 6"></polyline>
    </svg>
  </symbol>
  <symbol id="svg-sun" viewBox="0 0 24 24">
    <title>Light mode</title>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather-sun">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
  </symbol>
  <symbol id="svg-moon" viewBox="0 0 24 24">
    <title>Dark mode</title>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="icon-tabler-moon">
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z" />
    </svg>
  </symbol>
  <symbol id="svg-sun-with-moon" viewBox="0 0 24 24">
    <title>Auto light/dark, in light mode</title>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="1" stroke-linecap="round" stroke-linejoin="round"
      class="icon-custom-derived-from-feather-sun-and-tabler-moon">
      <path style="opacity: 50%" d="M 5.411 14.504 C 5.471 14.504 5.532 14.504 5.591 14.504 C 3.639 16.319 4.383 19.569 6.931 20.352 C 7.693 20.586 8.512 20.551 9.25 20.252 C 8.023 23.207 4.056 23.725 2.11 21.184 C 0.166 18.642 1.702 14.949 4.874 14.536 C 5.051 14.512 5.231 14.5 5.411 14.5 L 5.411 14.504 Z"/>
      <line x1="14.5" y1="3.25" x2="14.5" y2="1.25"/>
      <line x1="14.5" y1="15.85" x2="14.5" y2="17.85"/>
      <line x1="10.044" y1="5.094" x2="8.63" y2="3.68"/>
      <line x1="19" y1="14.05" x2="20.414" y2="15.464"/>
      <line x1="8.2" y1="9.55" x2="6.2" y2="9.55"/>
      <line x1="20.8" y1="9.55" x2="22.8" y2="9.55"/>
      <line x1="10.044" y1="14.006" x2="8.63" y2="15.42"/>
      <line x1="19" y1="5.05" x2="20.414" y2="3.636"/>
      <circle cx="14.5" cy="9.55" r="3.6"/>
    </svg>
  </symbol>
  <symbol id="svg-moon-with-sun" viewBox="0 0 24 24">
    <title>Auto light/dark, in dark mode</title>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="1" stroke-linecap="round" stroke-linejoin="round"
      class="icon-custom-derived-from-feather-sun-and-tabler-moon">
      <path d="M 8.282 7.007 C 8.385 7.007 8.494 7.007 8.595 7.007 C 5.18 10.184 6.481 15.869 10.942 17.24 C 12.275 17.648 13.706 17.589 15 17.066 C 12.851 22.236 5.91 23.143 2.505 18.696 C -0.897 14.249 1.791 7.786 7.342 7.063 C 7.652 7.021 7.965 7 8.282 7 L 8.282 7.007 Z"/>
      <line style="opacity: 50%" x1="18" y1="3.705" x2="18" y2="2.5"/>
      <line style="opacity: 50%" x1="18" y1="11.295" x2="18" y2="12.5"/>
      <line style="opacity: 50%" x1="15.316" y1="4.816" x2="14.464" y2="3.964"/>
      <line style="opacity: 50%" x1="20.711" y1="10.212" x2="21.563" y2="11.063"/>
      <line style="opacity: 50%" x1="14.205" y1="7.5" x2="13.001" y2="7.5"/>
      <line style="opacity: 50%" x1="21.795" y1="7.5" x2="23" y2="7.5"/>
      <line style="opacity: 50%" x1="15.316" y1="10.184" x2="14.464" y2="11.036"/>
      <line style="opacity: 50%" x1="20.711" y1="4.789" x2="21.563" y2="3.937"/>
      <circle style="opacity: 50%" cx="18" cy="7.5" r="2.169"/>
    </svg>
  </symbol>
  <symbol id="svg-pencil" viewBox="0 0 24 24">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="icon-tabler-pencil-code">
      <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />
      <path d="M13.5 6.5l4 4" />
      <path d="M20 21l2 -2l-2 -2" />
      <path d="M17 17l-2 2l2 2" />
    </svg>
  </symbol>
  <symbol id="svg-eye" viewBox="0 0 24 24">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="icon-tabler-eye-code">
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" />
      <path
        d="M11.11 17.958c-3.209 -.307 -5.91 -2.293 -8.11 -5.958c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6c-.21 .352 -.427 .688 -.647 1.008" />
      <path d="M20 21l2 -2l-2 -2" />
      <path d="M17 17l-2 2l2 2" />
    </svg>
  </symbol>
</svg>

<input type="checkbox" class="sidebar-toggle" name="__navigation" id="__navigation">
<input type="checkbox" class="sidebar-toggle" name="__toc" id="__toc">
<label class="overlay sidebar-overlay" for="__navigation">
  <div class="visually-hidden">Hide navigation sidebar</div>
</label>
<label class="overlay toc-overlay" for="__toc">
  <div class="visually-hidden">Hide table of contents sidebar</div>
</label>

<a class="skip-to-content muted-link" href="#furo-main-content">Skip to content</a>



<div class="page">
  <header class="mobile-header">
    <div class="header-left">
      <label class="nav-overlay-icon" for="__navigation">
        <div class="visually-hidden">Toggle site navigation sidebar</div>
        <i class="icon"><svg><use href="#svg-menu"></use></svg></i>
      </label>
    </div>
    <div class="header-center">
      <a href="../index.html"><div class="brand">GRAFX Documentation</div></a>
    </div>
    <div class="header-right">
      <div class="theme-toggle-container theme-toggle-header">
        <button class="theme-toggle">
          <div class="visually-hidden">Toggle Light / Dark / Auto color theme</div>
          <svg class="theme-icon-when-auto-light"><use href="#svg-sun-with-moon"></use></svg>
          <svg class="theme-icon-when-auto-dark"><use href="#svg-moon-with-sun"></use></svg>
          <svg class="theme-icon-when-dark"><use href="#svg-moon"></use></svg>
          <svg class="theme-icon-when-light"><use href="#svg-sun"></use></svg>
        </button>
      </div>
      <label class="toc-overlay-icon toc-header-icon" for="__toc">
        <div class="visually-hidden">Toggle table of contents sidebar</div>
        <i class="icon"><svg><use href="#svg-toc"></use></svg></i>
      </label>
    </div>
  </header>
  <aside class="sidebar-drawer">
    <div class="sidebar-container">
      
      <div class="sidebar-sticky"><a class="sidebar-brand" href="../index.html">
  
  
  <span class="sidebar-brand-text">GRAFX Documentation</span>
  
</a><form class="sidebar-search-container" method="get" action="../search.html" role="search">
  <input class="sidebar-search" placeholder="Search" name="q" aria-label="Search">
  <input type="hidden" name="check_keywords" value="yes">
  <input type="hidden" name="area" value="default">
</form>
<div id="searchbox"></div><div class="sidebar-scroll"><div class="sidebar-tree">
  <p class="caption" role="heading"><span class="caption-text">Introduction</span></p>
<ul class="current">
<li class="toctree-l1 current current-page"><a class="current reference internal" href="#">Audio Processing Graphs</a></li>
<li class="toctree-l1"><a class="reference internal" href="processors.html">Differentiable Processors</a></li>
<li class="toctree-l1"><a class="reference internal" href="render.html">Batched Audio Processing</a></li>
</ul>
<p class="caption" role="heading"><span class="caption-text">Graph API</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../graph_api/data.html">grafx.data</a></li>
<li class="toctree-l1"><a class="reference internal" href="../graph_api/render.html">grafx.render</a></li>
<li class="toctree-l1"><a class="reference internal" href="../graph_api/draw.html">grafx.draw</a></li>
<li class="toctree-l1"><a class="reference internal" href="../graph_api/utils.html">grafx.utils</a></li>
</ul>
<p class="caption" role="heading"><span class="caption-text">Processor API</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/core.html">grafx.processors.core</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/filter.html">grafx.processors.filter</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/eq.html">grafx.processors.eq</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/stereo.html">grafx.processors.stereo</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/dynamics.html">grafx.processors.dynamics</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/nonlinear.html">grafx.processors.nonlinear</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/reverb.html">grafx.processors.reverb</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/delay.html">grafx.processors.delay</a></li>
<li class="toctree-l1"><a class="reference internal" href="../processor_api/container.html">grafx.processors.container</a></li>
</ul>
<p class="caption" role="heading"><span class="caption-text">References</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../references/history.html">Versions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../references/reference.html">References</a></li>
</ul>

</div>
</div>

      </div>
      
    </div>
  </aside>
  <div class="main">
    <div class="content">
      <div class="article-container">
        <a href="#" class="back-to-top muted-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M13 20h-2V8l-5.5 5.5-1.42-1.42L12 4.16l7.92 7.92-1.42 1.42L13 8v12z"></path>
          </svg>
          <span>Back to top</span>
        </a>
        <div class="content-icon-container">
          <div class="theme-toggle-container theme-toggle-content">
            <button class="theme-toggle">
              <div class="visually-hidden">Toggle Light / Dark / Auto color theme</div>
              <svg class="theme-icon-when-auto-light"><use href="#svg-sun-with-moon"></use></svg>
              <svg class="theme-icon-when-auto-dark"><use href="#svg-moon-with-sun"></use></svg>
              <svg class="theme-icon-when-dark"><use href="#svg-moon"></use></svg>
              <svg class="theme-icon-when-light"><use href="#svg-sun"></use></svg>
            </button>
          </div>
          <label class="toc-overlay-icon toc-content-icon" for="__toc">
            <div class="visually-hidden">Toggle table of contents sidebar</div>
            <i class="icon"><svg><use href="#svg-toc"></use></svg></i>
          </label>
        </div>
        <article role="main" id="furo-main-content">
          <section id="audio-processing-graphs">
<span id="id1"></span><h1>Audio Processing Graphs<a class="headerlink" href="#audio-processing-graphs" title="Link to this heading"></a></h1>
<p>Domain practitioners (e.g., musicians and audio engineers) sculpt and transform their sounds by combining multiple processors,
forming an <em>audio processing graph</em> <span id="id2">[<a class="reference internal" href="../references/reference.html#id65" title="Sungho Lee, Jaehyun Park, Seungryeol Paik, and Kyogu Lee. Blind estimation of audio processing graph. In IEEE ICASSP, 1–5. 2023.">LPPL23</a>]</span>.</p>
<blockquote>
<div><p>Audio processing graphs are everywhere — guitar pedalboards, modular synthesizers, and mixing consoles, to name a few.
The popular JUCE framework has <a class="reference external" href="https://docs.juce.com/master/classAudioProcessorGraph.html">AudioProcessorGraph</a> class.
<a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API#audio_graphs">Web Audio API</a> is also based on graphs.
This ubiquitous structure is not just a coincidence; <em>compositionality</em> and <em>modularity</em> of processors are essential features
that allow practitioners to create and control complex processing with ease.</p>
</div></blockquote>
<p>Nevertheless, recent deep-learning methods for musical signal processing have overlooked this practice,
assuming fixed processing chains or relying on end-to-end neural network-based methods.
<code class="code highlight python docutils literal highlight-python"><span class="n">GRAFX</span></code> aims to close this gap — it provides a collection of functionalities for creating, manipulating, and rendering audio processing graphs.
Especially, it provides the following distinctive features.</p>
<ol class="arabic simple">
<li><p>Our graphs can be converted into <code class="code highlight python docutils literal highlight-python"><span class="n">PyTorch</span></code> tensor representations <span id="id3">[<a class="reference internal" href="../references/reference.html#id115" title="Adam Paszke and others. PyTorch: an imperative style, high-performance deep learning library. NeurIPS, 2019.">P+19</a>]</span>,
which can be used for graph representation learning, i.e., as input of graph neural networks (GNNs) <span id="id4">[<a class="reference internal" href="../references/reference.html#id143" title="Matthias Fey and Jan Eric Lenssen. Fast graph representation learning with pytorch geometric. arXiv:1903.02428, 2019.">FL19</a>]</span>.</p></li>
<li><p>We provide a collection of various <a class="reference internal" href="processors.html#differentiable-processors"><span class="std std-ref">differentiable audio processors</span></a>, including equalizers, dynamic range compressors, reverb, and many more.</p></li>
<li><p>We provide an <a class="reference internal" href="render.html#batched-audio-processing"><span class="std std-ref">efficient and flexible method</span></a> for calculating output audio from graphs in GPU.
Combined with the differentiable processors,
we can optimize the graph structure and parameters (or their neural predictors)
via gradient descent end-to-end <span id="id5">[<a class="reference internal" href="../references/reference.html#id6" title="Joseph T. Colonel and Joshua Reiss. Reverse engineering of a recording mix with differentiable digital signal processing. JASA, 150(1):608-619, 2021.">CR21</a>, <a class="reference internal" href="../references/reference.html#id148" title="Sungho Lee, Marco A Martinez-Ramirez, Wei-Hsiang Liao, Stefan Uhlich, Giorgio Fabbro, Kyogu Lee, and Yuki Mitsufuji. Searching for music mixing graphs: a pruning approach. In DAFx. 2024.">LMRL+24a</a>, <a class="reference internal" href="../references/reference.html#id65" title="Sungho Lee, Jaehyun Park, Seungryeol Paik, and Kyogu Lee. Blind estimation of audio processing graph. In IEEE ICASSP, 1–5. 2023.">LPPL23</a>]</span>.</p></li>
</ol>
<p>This short series of introductions will share the core concepts of <code class="code highlight python docutils literal highlight-python"><span class="n">GRAFX</span></code>.
While it generally follows our paper <span id="id6">[<a class="reference internal" href="../references/reference.html#id151" title="Sungho Lee, Marco A Martinez-Ramirez, Wei-Hsiang Liao, Stefan Uhlich, Giorgio Fabbro, Kyogu Lee, and Yuki Mitsufuji. GRAFX: an open-source library for audio processing graphs in Pytorch. In DAFx. 2024.">LMRL+24b</a>]</span>,
we extend the discussion to the latest updates and provide practical examples.</p>
<section id="definitions-and-notations">
<h2>Definitions and Notations<a class="headerlink" href="#definitions-and-notations" title="Link to this heading"></a></h2>
<p>Following the standard notation,
we write an audio processing graph as <span class="math notranslate nohighlight">\(G=(V, E)\)</span> where <span class="math notranslate nohighlight">\(V\)</span> and <span class="math notranslate nohighlight">\(E\)</span> are the node and edge set, respectively.</p>
<section id="nodes">
<h3>Nodes<a class="headerlink" href="#nodes" title="Link to this heading"></a></h3>
<p>Each node <span class="math notranslate nohighlight">\(v_i \in V\)</span> (<span class="math notranslate nohighlight">\(i\)</span> denotes a node index) can represent a <em>processor</em> <span class="math notranslate nohighlight">\(f_i\)</span>.
Each node has a type attribute <span class="math notranslate nohighlight">\(t_i\)</span>, e.g., <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;reverb&quot;</span></code>.
It takes <span class="math notranslate nohighlight">\(M\)</span> signal(s) <span class="math notranslate nohighlight">\(u_i[n]\)</span> and a collection of parameters <span class="math notranslate nohighlight">\(p_i\)</span> as input
and produces <span class="math notranslate nohighlight">\(N\)</span> output(s) <span class="math notranslate nohighlight">\(y_i[n]\)</span> (<span class="math notranslate nohighlight">\(n\)</span> denotes a time index).
<div class="math-wrapper docutils container">
<div class="math notranslate nohighlight">
\[
\underbrace{y^{(1)}_i[n], \cdots, y^{(N)}_i[n]}_{y_i[n]} = f(\underbrace{u^{(1)}_i[n], \cdots, u^{(M)}_i[n]}_{u_i[n]}, p).
\]</div>
</div>
</p>
</section>
<section id="edges">
<h3>Edges<a class="headerlink" href="#edges" title="Link to this heading"></a></h3>
<p>Each edge <span class="math notranslate nohighlight">\(e_{ij}\in E\)</span> naturally represents a <em>cable</em> connecting two nodes,
Each edge also requires a type attribute <span class="math notranslate nohighlight">\(t_{ij}=(k, l)\)</span>,
a tuple of input and output channel indices,
unless every processor in a graph is a single-input single-output system (SISO), i.e., <span class="math notranslate nohighlight">\(M=N=1\)</span>.
Each input signal is decided by the connected edges, which can be written as follows,
<div class="math-wrapper docutils container">
<div class="math notranslate nohighlight">
\[
u_{i}^{(l)}[n] = \sum_{(j, k) \in \mathcal{N}^+(i, l)} y_{j}^{(k)}[n]
\]</div>
</div>
</p>
<p>where <span class="math notranslate nohighlight">\(\mathcal{N}^+(i, l)\)</span> is a collection of nodes and channel indices
that send their output signals to <span class="math notranslate nohighlight">\(l^\mathrm{th}\)</span> input of node <span class="math notranslate nohighlight">\(i\)</span>.
In short, each node’s outputs are computed by finding its inputs,
aggregating those, and processing the sums with the parameters.</p>
</section>
<section id="graph-structure">
<h3>Graph Structure<a class="headerlink" href="#graph-structure" title="Link to this heading"></a></h3>
<p>We allow any <em>directed acyclic multigraph</em> as an audio processing graph.
<em>Directed</em> means that the edges have directions, connecting the output of a source to the input of a destination.
<em>Acyclic</em> means that are no cycles (or <em>feedback loop</em>) in the graph.
Finally, <em>multigraph</em> means that multiple edges can exist between the same pair of nodes unless their types are identical.
The following figure shows an example of a valid graph used in
(different letters denote different node types)
<span id="id7">[<a class="reference internal" href="../references/reference.html#id148" title="Sungho Lee, Marco A Martinez-Ramirez, Wei-Hsiang Liao, Stefan Uhlich, Giorgio Fabbro, Kyogu Lee, and Yuki Mitsufuji. Searching for music mixing graphs: a pruning approach. In DAFx. 2024.">LMRL+24a</a>]</span>.</p>
<figure class="align-default">
<a class="reference internal image-reference" href="../_images/cambridge_RememberDecember_CUNextTime.svg"><img alt="../_images/cambridge_RememberDecember_CUNextTime.svg" src="../_images/cambridge_RememberDecember_CUNextTime.svg" style="width: 768.02px; height: 273.68px;" />
</a>
</figure>
<p>Crucially, the acyclic property allows us to compute the output audio by repeating the
<em>gather-aggregate-process</em> over the entire nodes in topological order, from the inputs to the output
(this is impossible if there is a cycle or <em>feedback loop</em>).
Usually, we have <span class="math notranslate nohighlight">\(K\)</span> inputs and a single output.
In such a case, the output signal can be written as
<div class="math-wrapper docutils container">
<div class="math notranslate nohighlight">
\[
y[n] = G(s_1[n], \cdots, s_K[n]; \mathbf{P})
\]</div>
</div>
</p>
<p>where <span class="math notranslate nohighlight">\(s_k[n]\)</span> is a source signal that corresponds to the <span class="math notranslate nohighlight">\(k^\mathrm{th}\)</span> <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;in&quot;</span></code> node
and <span class="math notranslate nohighlight">\(\mathbf{P}\)</span> is a collection of all parameters in the graph.
We can also write the signals as tensors,
<span class="math notranslate nohighlight">\(\mathbf{S} \in \mathbb{R}^{K\times C\times L}\)</span> and <span class="math notranslate nohighlight">\(\mathbf{Y} \in \mathbb{R}^{1\times C\times L}\)</span>,
where
<span class="math notranslate nohighlight">\(K\)</span>, <span class="math notranslate nohighlight">\(C\)</span>, and <span class="math notranslate nohighlight">\(L\)</span> are the number of sources, channels, and length, respectively.
This simplifies the above equation to <span class="math notranslate nohighlight">\(\mathbf{Y} = G(\mathbf{S}; \mathbf{P})\)</span>.</p>
</section>
</section>
<section id="creating-graphs">
<h2>Creating Graphs<a class="headerlink" href="#creating-graphs" title="Link to this heading"></a></h2>
<p>For creating and manipulating the audio processing graphs,
we provide a mutable data structure <a class="reference internal" href="../graph_api/data.html#grafx.data.graph.GRAFX" title="grafx.data.graph.GRAFX"><code class="xref py py-class docutils literal notranslate"><span class="pre">GRAFX</span></code></a>
(same as the library name).
It inherits <code class="code highlight python docutils literal highlight-python"><span class="n">MultiDiGraph</span></code> class from <code class="code highlight python docutils literal highlight-python"><span class="n">networkx</span></code> <span id="id8">[<a class="reference internal" href="../references/reference.html#id150" title="Aric Hagberg, Pieter J Swart, and Daniel A Schult. Exploring network structure, dynamics, and function using networkx. Technical Report, Los Alamos National Laboratory (LANL), Los Alamos, NM (United States), 2008.">HSS08</a>]</span>
and provides additional functionalities, e.g., adding a serial chain of processors.</p>
<section id="node-configurations">
<h3>Node Configurations<a class="headerlink" href="#node-configurations" title="Link to this heading"></a></h3>
<p>Before creating a graph, we need to pre-define allowed processor types
(and their additional configurations, if needed).
This procedure is necessary when we use our tensor representation or compute the output audio of the graph.
We provide a <a class="reference internal" href="../graph_api/data.html#grafx.data.configs.NodeConfigs" title="grafx.data.configs.NodeConfigs"><code class="xref py py-class docutils literal notranslate"><span class="pre">NodeConfigs</span></code></a> class for this purpose.
Suppose that we have three processor types, <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;eq&quot;</span></code>, <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;compressor&quot;</span></code>, and <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;reverb&quot;</span></code>.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">grafx.data</span> <span class="kn">import</span> <span class="n">NodeConfigs</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">NodeConfigs</span><span class="p">([</span><span class="s2">&quot;eq&quot;</span><span class="p">,</span> <span class="s2">&quot;compressor&quot;</span><span class="p">,</span> <span class="s2">&quot;reverb&quot;</span><span class="p">])</span>
</pre></div>
</div>
<p><code class="code highlight python docutils literal highlight-python"><span class="nb">print</span><span class="p">(</span><span class="n">config</span><span class="p">)</span></code> will give the following output.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>NodeConfigs<span class="w"> </span>with<span class="w"> </span><span class="m">6</span><span class="w"> </span>node<span class="w"> </span>types<span class="w"> </span><span class="o">(</span><span class="nv">siso_only</span><span class="o">=</span>True<span class="o">)</span>
<span class="w">  </span><span class="o">(</span><span class="m">0</span><span class="o">)</span><span class="w"> </span><span class="k">in</span>:<span class="w"> </span>None<span class="w"> </span>-&gt;<span class="w"> </span>&lt;main&gt;
<span class="w">  </span><span class="o">(</span><span class="m">1</span><span class="o">)</span><span class="w"> </span>out:<span class="w"> </span>&lt;main&gt;<span class="w"> </span>-&gt;<span class="w"> </span>None
<span class="w">  </span><span class="o">(</span><span class="m">2</span><span class="o">)</span><span class="w"> </span>mix:<span class="w"> </span>&lt;main&gt;<span class="w"> </span>-&gt;<span class="w"> </span>&lt;main&gt;
<span class="w">  </span><span class="o">(</span><span class="m">3</span><span class="o">)</span><span class="w"> </span>eq:<span class="w"> </span>&lt;main&gt;<span class="w"> </span>-&gt;<span class="w"> </span>&lt;main&gt;
<span class="w">  </span><span class="o">(</span><span class="m">4</span><span class="o">)</span><span class="w"> </span>compressor:<span class="w"> </span>&lt;main&gt;<span class="w"> </span>-&gt;<span class="w"> </span>&lt;main&gt;
<span class="w">  </span><span class="o">(</span><span class="m">5</span><span class="o">)</span><span class="w"> </span>reverb:<span class="w"> </span>&lt;main&gt;<span class="w"> </span>-&gt;<span class="w"> </span>&lt;main&gt;
</pre></div>
</div>
<p>With the outputs, we note the following.</p>
<ul class="simple">
<li><p>Along with the processor types,
auxiliary <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;in&quot;</span></code>, <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;out&quot;</span></code>, <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;mix&quot;</span></code> are also included by default.</p></li>
<li><p>The <code class="docutils literal notranslate"><span class="pre">eq:</span> <span class="pre">&lt;main&gt;</span> <span class="pre">-&gt;</span> <span class="pre">&lt;main&gt;</span></code> denotes that the <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;eq&quot;</span></code> processor has a single input and output.
The <code class="docutils literal notranslate"><span class="pre">None</span></code> denotes there is no input or output.</p>
</li>
<li><p>When the processors are provided as a <code class="code highlight python docutils literal highlight-python"><span class="nb">list</span></code>, they are all assumed to be SISO systems.
To set up MIMO systems, provide
a <code class="code highlight python docutils literal highlight-python"><span class="nb">dict</span></code> of types as keys and their inlet/outlet configurations as values.</p></li>
</ul>
</section>
<section id="an-empty-graph">
<h3>An Empty Graph<a class="headerlink" href="#an-empty-graph" title="Link to this heading"></a></h3>
<p>First, we can create an empty graph the <code class="xref py py-class docutils literal notranslate"><span class="pre">NodeConfigs</span></code>.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">grafx.data</span> <span class="kn">import</span> <span class="n">GRAFX</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">GRAFX</span><span class="p">(</span><span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>
</pre></div>
</div>
<p>Here, <code class="code highlight python docutils literal highlight-python"><span class="nb">print</span><span class="p">(</span><span class="n">G</span><span class="p">)</span></code> will give the following output.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>GRAFX<span class="w"> </span>with<span class="w"> </span><span class="m">0</span><span class="w"> </span>nodes<span class="w"> </span><span class="p">&amp;</span><span class="w"> </span><span class="m">0</span><span class="w"> </span>edges
</pre></div>
</div>
</section>
<section id="basic-operations">
<h3>Basic Operations<a class="headerlink" href="#basic-operations" title="Link to this heading"></a></h3>
<p>Then, we add an <code class="code highlight python docutils literal highlight-python"><span class="s2">&quot;out&quot;</span></code> node to the graph with the <code class="code highlight python docutils literal highlight-python"><span class="n">add</span></code> method.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">out_id</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&quot;out&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>The <code class="code highlight python docutils literal highlight-python"><span class="n">add</span></code> returns the added node’s integer node ID, which can be used to access its attributes or connect to other nodes.
Now <code class="code highlight python docutils literal highlight-python"><span class="nb">print</span><span class="p">(</span><span class="n">G</span><span class="p">)</span></code> will give the following.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>GRAFX<span class="w"> </span>with<span class="w"> </span><span class="m">1</span><span class="w"> </span>nodes<span class="w"> </span><span class="p">&amp;</span><span class="w"> </span><span class="m">0</span><span class="w"> </span>edges
<span class="w">  </span><span class="o">[</span><span class="m">0</span><span class="o">]</span><span class="w"> </span>out
</pre></div>
</div>
<p>If we try to add a node type that is not provided to <code class="xref py py-class docutils literal notranslate"><span class="pre">NodeConfig</span></code>, it will raise an error.
For example, if we try <code class="code highlight python docutils literal highlight-python"><span class="n">G</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&quot;noisegate&quot;</span><span class="p">)</span></code>,</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>Exception:<span class="w"> </span>Invalid<span class="w"> </span>node_type:<span class="w"> </span>noisegate,<span class="w"> </span>it<span class="w"> </span>only<span class="w"> </span>allows<span class="w"> </span><span class="o">[</span><span class="s1">&#39;in&#39;</span>,<span class="w"> </span><span class="s1">&#39;out&#39;</span>,<span class="w"> </span><span class="s1">&#39;mix&#39;</span>,<span class="w"> </span><span class="s1">&#39;eq&#39;</span>,<span class="w"> </span><span class="s1">&#39;compressor&#39;</span>,<span class="w"> </span><span class="s1">&#39;reverb&#39;</span>.
</pre></div>
</div>
<p>We can also add a serial chain of processors to the graph with <a class="reference internal" href="../graph_api/data.html#grafx.data.graph.GRAFX.add_serial_chain" title="grafx.data.graph.GRAFX.add_serial_chain"><code class="xref py py-func docutils literal notranslate"><span class="pre">add_serial_chain()</span></code></a> method,
which returns the ID of the start and end nodes.
Other nodes can be accessed by the id in between.
Also, we can connect the nodes with <a class="reference internal" href="../graph_api/data.html#grafx.data.graph.GRAFX.connect" title="grafx.data.graph.GRAFX.connect"><code class="xref py py-func docutils literal notranslate"><span class="pre">connect()</span></code></a> method, providing the source and destination node IDs.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">number_of_sources</span> <span class="o">=</span> <span class="mi">3</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_sources</span><span class="p">):</span>
    <span class="n">chain</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;eq&quot;</span><span class="p">,</span> <span class="s2">&quot;compressor&quot;</span><span class="p">,</span> <span class="s2">&quot;reverb&quot;</span><span class="p">]</span>
    <span class="n">start_id</span><span class="p">,</span> <span class="n">end_id</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">add_serial_chain</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
    <span class="n">G</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">end_id</span><span class="p">,</span> <span class="n">out_id</span><span class="p">)</span>
</pre></div>
</div>
<p>The above code will add three sources, each connected to an equalizer, compressor, and reverb in series.
Them, their outputs, i.e., the reverb outputs, are connected to the output node.
Now, our graph is as follows.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>GRAFX<span class="w"> </span>with<span class="w"> </span><span class="m">13</span><span class="w"> </span>nodes<span class="w"> </span><span class="p">&amp;</span><span class="w"> </span><span class="m">12</span><span class="w"> </span>edges
<span class="w">  </span><span class="o">[</span><span class="m">0</span><span class="o">]</span><span class="w"> </span>out
<span class="w">  </span><span class="o">[</span><span class="m">1</span><span class="o">]</span><span class="w"> </span><span class="k">in</span><span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">2</span><span class="o">]</span><span class="w"> </span>eq
<span class="w">  </span><span class="o">[</span><span class="m">2</span><span class="o">]</span><span class="w"> </span>eq<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">3</span><span class="o">]</span><span class="w"> </span>compressor
<span class="w">  </span><span class="o">[</span><span class="m">3</span><span class="o">]</span><span class="w"> </span>compressor<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">4</span><span class="o">]</span><span class="w"> </span>reverb
<span class="w">  </span><span class="o">[</span><span class="m">4</span><span class="o">]</span><span class="w"> </span>reverb<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">0</span><span class="o">]</span><span class="w"> </span>out
<span class="w">  </span><span class="o">[</span><span class="m">5</span><span class="o">]</span><span class="w"> </span><span class="k">in</span><span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">6</span><span class="o">]</span><span class="w"> </span>eq
<span class="w">  </span><span class="o">[</span><span class="m">6</span><span class="o">]</span><span class="w"> </span>eq<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">7</span><span class="o">]</span><span class="w"> </span>compressor
<span class="w">  </span><span class="o">[</span><span class="m">7</span><span class="o">]</span><span class="w"> </span>compressor<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">8</span><span class="o">]</span><span class="w"> </span>reverb
<span class="w">  </span><span class="o">[</span><span class="m">8</span><span class="o">]</span><span class="w"> </span>reverb<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">0</span><span class="o">]</span><span class="w"> </span>out
<span class="w">  </span><span class="o">[</span><span class="m">9</span><span class="o">]</span><span class="w"> </span><span class="k">in</span><span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">10</span><span class="o">]</span><span class="w"> </span>eq
<span class="w">  </span><span class="o">[</span><span class="m">10</span><span class="o">]</span><span class="w"> </span>eq<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">11</span><span class="o">]</span><span class="w"> </span>compressor
<span class="w">  </span><span class="o">[</span><span class="m">11</span><span class="o">]</span><span class="w"> </span>compressor<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">12</span><span class="o">]</span><span class="w"> </span>reverb
<span class="w">  </span><span class="o">[</span><span class="m">12</span><span class="o">]</span><span class="w"> </span>reverb<span class="w"> </span>-&gt;<span class="w"> </span><span class="o">[</span><span class="m">0</span><span class="o">]</span><span class="w"> </span>out
</pre></div>
</div>
</section>
</section>
<section id="tensor-representations">
<h2>Tensor Representations<a class="headerlink" href="#tensor-representations" title="Link to this heading"></a></h2>
<p>Once the graphs are created, they can be used to compute output audio or fed into a GNN.
In such cases, representing each graph as a collection of tensors is more convenient and efficient.
Therefore, we provide a <a class="reference internal" href="../graph_api/data.html#grafx.data.tensor.GRAFXTensor" title="grafx.data.tensor.GRAFXTensor"><code class="xref py py-class docutils literal notranslate"><span class="pre">GRAFXTensor</span></code></a> class,
which is compatible with <code class="code highlight python docutils literal highlight-python"><span class="n">Data</span></code> class from <code class="code highlight python docutils literal highlight-python"><span class="n">torch_geometric</span></code> <span id="id9">[<a class="reference internal" href="../references/reference.html#id143" title="Matthias Fey and Jan Eric Lenssen. Fast graph representation learning with pytorch geometric. arXiv:1903.02428, 2019.">FL19</a>]</span>.
The processor types are assigned with integer values,
The following are the tensors we use to describe each graph.</p>
<ol class="arabic simple">
<li><p>A node type vector <span class="math notranslate nohighlight">\(\mathbf{T}_V \in \mathbb{N}^{\left|V\right|}\)</span>.
The mapping between the node type and its integer value is determined by the predefined <code class="code highlight python docutils literal highlight-python"><span class="n">NodeConfig</span></code> object.</p></li>
<li><p>An edge index tensor <span class="math notranslate nohighlight">\(\mathbf{E} \in \mathbb{N}^{2\times\left|E\right|}\)</span>,</p></li>
<li><p>(<em>Optional</em>) An edge type tensor <span class="math notranslate nohighlight">\(\mathbf{T}_E \in \mathbb{N}^{2\times \left|E\right|}\)</span>
where <span class="math notranslate nohighlight">\(\left|\cdot \right|\)</span> denotes the size of a given set.
Only used when the <a class="reference internal" href="../graph_api/data.html#grafx.data.configs.NodeConfigs" title="grafx.data.configs.NodeConfigs"><code class="xref py py-class docutils literal notranslate"><span class="pre">NodeConfigs</span></code></a> contains MIMO processors.</p></li>
<li><p>(<em>Optional</em>) A collection of all parameters in a dictionary <span class="math notranslate nohighlight">\(\mathbf{P}\)</span>
(or any reasonable <code class="code highlight python docutils literal highlight-python"><span class="n">Mapping</span></code> such as <code class="code highlight python docutils literal highlight-python"><span class="n">nn</span><span class="o">.</span><span class="n">ParameterDict</span></code>)
whose key is a node type <span class="math notranslate nohighlight">\(t\)</span> and value contains the parameters of that type.</p></li>
</ol>
<p>We can obtain the tensors by converting the <a class="reference internal" href="../graph_api/data.html#grafx.data.graph.GRAFX" title="grafx.data.graph.GRAFX"><code class="xref py py-class docutils literal notranslate"><span class="pre">GRAFX</span></code></a> graph with <a class="reference internal" href="../graph_api/data.html#grafx.data.conversion.convert_to_tensor" title="grafx.data.conversion.convert_to_tensor"><code class="xref py py-func docutils literal notranslate"><span class="pre">convert_to_tensor()</span></code></a>.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">grafx.data</span> <span class="kn">import</span> <span class="n">convert_to_tensor</span>
<span class="n">G_t</span> <span class="o">=</span> <span class="n">convert_to_tensor</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</pre></div>
</div>
<p>Here, <code class="code highlight python docutils literal highlight-python"><span class="nb">print</span><span class="p">(</span><span class="n">G_t</span><span class="p">)</span></code> gives the followings,</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>GRAFXTensor<span class="o">(</span>
<span class="w">  </span><span class="nv">node_types</span><span class="o">=[</span><span class="m">13</span><span class="o">]</span>,
<span class="w">  </span><span class="nv">edge_indices</span><span class="o">=[</span><span class="m">2</span>,<span class="w"> </span><span class="m">12</span><span class="o">]</span>,
<span class="w">  </span><span class="nv">edge_types</span><span class="o">=</span>None,
<span class="w">  </span><span class="nv">rendering_order_method</span><span class="o">=</span>None,
<span class="w">  </span><span class="nv">rendering_orders</span><span class="o">=</span>None,
<span class="w">  </span><span class="nv">type_sequence</span><span class="o">=</span>None,
<span class="w">  </span><span class="nv">counter</span><span class="o">=</span><span class="m">13</span>,
<span class="w">  </span><span class="nv">batch</span><span class="o">=</span>False,
<span class="w">  </span><span class="nv">config</span><span class="o">=</span>&lt;grafx.data.configs.NodeConfigs<span class="w"> </span>object<span class="w"> </span>at<span class="w"> </span>0x7ff43769c760&gt;,
<span class="w">  </span><span class="nv">config_hash</span><span class="o">=</span><span class="m">8792929901686</span>,
<span class="w">  </span><span class="nv">invalid_op</span><span class="o">=</span><span class="s1">&#39;error&#39;</span>
<span class="o">)</span>
</pre></div>
</div>
<p>It contains <code class="code highlight python docutils literal highlight-python"><span class="n">node_types</span></code>, <code class="code highlight python docutils literal highlight-python"><span class="n">edge_indices</span></code>, and others that are useful for several purposes,
e.g., computing output audio.</p>
<section id="processor-parameters">
<h3>Processor Parameters<a class="headerlink" href="#processor-parameters" title="Link to this heading"></a></h3>
<p>We further elaborate on the parameter dictionary <span class="math notranslate nohighlight">\(\mathbf{P}\)</span> as it is the most nontrivial part of our tensor representation.
It has the dictionary type as each processor type can have a different set and number of parameters.
All parameters of type <span class="math notranslate nohighlight">\(t\)</span> are collected to a dictionary value <span class="math notranslate nohighlight">\(\mathbf{P}[t]\)</span>,
which can be either a single tensor or a dictionary of tensors.
When the latter case holds, <span class="math notranslate nohighlight">\(\mathbf{P}\)</span> becomes a nested dictionary.
Every parameter tensor for type <span class="math notranslate nohighlight">\(t\)</span> must have a first dimension that has the number of nodes of that type <span class="math notranslate nohighlight">\(|V_t|\)</span>.
Also, each tensor follows the node ordering of the node type vector <span class="math notranslate nohighlight">\(\mathbf{T}_V\)</span>.
For example, parameters of a <span class="math notranslate nohighlight">\(n^\mathrm{th}\)</span> type-<span class="math notranslate nohighlight">\(t\)</span> node corresponds to <span class="math notranslate nohighlight">\(n^\mathrm{th}\)</span> element of each tensor in <span class="math notranslate nohighlight">\(\mathbf{P}[t]\)</span>, i.e.,
<span class="math notranslate nohighlight">\(\mathbf{P}[t][n]\)</span> or <span class="math notranslate nohighlight">\(\mathbf{P}[t][k][n]\)</span> for all <span class="math notranslate nohighlight">\(k\)</span> where <span class="math notranslate nohighlight">\(k\)</span> is a key of the <span class="math notranslate nohighlight">\(\mathbf{P}[t]\)</span>.
This way, we can easily access the parameters of specific nodes of that type.</p>
<p>Note that, throughout the above example, we did not provide any parameter while adding the nodes.
This is because one of our main applications is to estimate the parameters from some references
by direct parameter optimization or training a neural network as a predictor.
In this scenario, we only have the connectivity information <span class="math notranslate nohighlight">\((\mathbf{T}_V, \mathbf{E}, \mathbf{T}_E)\)</span>,
i.e., <em>what is connected to what</em>.
A previous work <span id="id10">[<a class="reference internal" href="../references/reference.html#id65" title="Sungho Lee, Jaehyun Park, Seungryeol Paik, and Kyogu Lee. Blind estimation of audio processing graph. In IEEE ICASSP, 1–5. 2023.">LPPL23</a>]</span> named it a <em>prototype graph</em> (and denoted with <span class="math notranslate nohighlight">\(G_0\)</span>).
Many existing works assume that this prototype graph is given (fixed in many cases)
and predict its parameters <span class="math notranslate nohighlight">\(\mathbf{P}\)</span>
<span id="id11">[<a class="reference internal" href="../references/reference.html#id139" title="Franco Caspe, Andrew McPherson, and Mark Sandler. DDX7: differentiable FM synthesis of musical instrument sounds. In ISMIR. 2022.">CMS22</a>, <a class="reference internal" href="../references/reference.html#id70" title="J Colonel. Music production behaviour modelling. 2023.">Col23</a>, <a class="reference internal" href="../references/reference.html#id140" title="Marco A Martinez-Ramirez, Oliver Wang, Paris Smaragdis, and Nicholas J Bryan. Differentiable signal processing with black-box audio effects. In IEEE ICASSP. 2021.">MRWSB21</a>, <a class="reference internal" href="../references/reference.html#id4" title="Christian J. Steinmetz, Jordi Pons, Santiago Pascual, and Joan Serrà. Automatic multitrack mixing with a differentiable mixing console of neural audio effects. In IEEE ICASSP, volume, 71-75. 2021.">SPPS21</a>, <a class="reference internal" href="../references/reference.html#id134" title="Noy Uzrad and others. DiffMoog: a differentiable modular synthesizer for sound matching. arXiv:2401.12570, 2024.">U+24</a>]</span>,
Of course, there are a few exceptions where the connectivity is also estimated
(albeit, in most cases, the underlying connectivity <span class="math notranslate nohighlight">\(G_0\)</span> is a simple serial chain)
<span id="id12">[<a class="reference internal" href="../references/reference.html#id132" title="Jinyue Guo and Brian McFee. Automatic recognition of cascaded guitar effects. In DAFx. 2023.">GM23</a>, <a class="reference internal" href="../references/reference.html#id148" title="Sungho Lee, Marco A Martinez-Ramirez, Wei-Hsiang Liao, Stefan Uhlich, Giorgio Fabbro, Kyogu Lee, and Yuki Mitsufuji. Searching for music mixing graphs: a pruning approach. In DAFx. 2024.">LMRL+24a</a>, <a class="reference internal" href="../references/reference.html#id65" title="Sungho Lee, Jaehyun Park, Seungryeol Paik, and Kyogu Lee. Blind estimation of audio processing graph. In IEEE ICASSP, 1–5. 2023.">LPPL23</a>, <a class="reference internal" href="../references/reference.html#id18" title="Christopher Mitcheltree and Hideki Koike. SerumRNN: step by step audio VST effect programming. In Artificial Intelligence in Music, Sound, Art and Design, pages 218–234. 2021.">MK21</a>, <a class="reference internal" href="../references/reference.html#id95" title="Zhen Ye, Wei Xue, Xu Tan, Qifeng Liu, and Yike Guo. NAS-FM: neural architecture search for tunable and interpretable sound synthesis based on frequency modulation. arXiv:2305.12868, 2023.">YXT+23</a>]</span>.
Refer to Appendix A of <span id="id13">[<a class="reference internal" href="../references/reference.html#id148" title="Sungho Lee, Marco A Martinez-Ramirez, Wei-Hsiang Liao, Stefan Uhlich, Giorgio Fabbro, Kyogu Lee, and Yuki Mitsufuji. Searching for music mixing graphs: a pruning approach. In DAFx. 2024.">LMRL+24a</a>]</span> for a comparative review on this matter.
Throughout this series of posts, we will not distinguish the prototype from the <em>full</em> graph
<span class="math notranslate nohighlight">\((\mathbf{T}_V, \mathbf{E}, \mathbf{T}_E, \mathbf{P})\)</span> as it is mostly clear from the context.
More details on the parameters will be in the following posts on the
<a class="reference internal" href="processors.html#differentiable-processors"><span class="std std-ref">processors</span></a> and
<a class="reference internal" href="render.html#batched-audio-processing"><span class="std std-ref">rendering</span></a>.</p>
</section>
</section>
</section>

        </article>
      </div>
      <footer>
        
        <div class="related-pages">
          <a class="next-page" href="processors.html">
              <div class="page-info">
                <div class="context">
                  <span>Next</span>
                </div>
                <div class="title">Differentiable Processors</div>
              </div>
              <svg class="furo-related-icon"><use href="#svg-arrow-right"></use></svg>
            </a>
          <a class="prev-page" href="../index.html">
              <svg class="furo-related-icon"><use href="#svg-arrow-right"></use></svg>
              <div class="page-info">
                <div class="context">
                  <span>Previous</span>
                </div>
                
                <div class="title">Home</div>
                
              </div>
            </a>
        </div>
        <div class="bottom-of-page">
          <div class="left-details">
            <div class="copyright">
                Copyright &#169; 2024, Sungho Lee
            </div>
            Made with <a href="https://www.sphinx-doc.org/">Sphinx</a> and <a class="muted-link" href="https://pradyunsg.me">@pradyunsg</a>'s
            
            <a href="https://github.com/pradyunsg/furo">Furo</a>
            
          </div>
          <div class="right-details">
            
          </div>
        </div>
        
      </footer>
    </div>
    <aside class="toc-drawer">
      
      
      <div class="toc-sticky toc-scroll">
        <div class="toc-title-container">
          <span class="toc-title">
            On this page
          </span>
        </div>
        <div class="toc-tree-container">
          <div class="toc-tree">
            <ul>
<li><a class="reference internal" href="#">Audio Processing Graphs</a><ul>
<li><a class="reference internal" href="#definitions-and-notations">Definitions and Notations</a><ul>
<li><a class="reference internal" href="#nodes">Nodes</a></li>
<li><a class="reference internal" href="#edges">Edges</a></li>
<li><a class="reference internal" href="#graph-structure">Graph Structure</a></li>
</ul>
</li>
<li><a class="reference internal" href="#creating-graphs">Creating Graphs</a><ul>
<li><a class="reference internal" href="#node-configurations">Node Configurations</a></li>
<li><a class="reference internal" href="#an-empty-graph">An Empty Graph</a></li>
<li><a class="reference internal" href="#basic-operations">Basic Operations</a></li>
</ul>
</li>
<li><a class="reference internal" href="#tensor-representations">Tensor Representations</a><ul>
<li><a class="reference internal" href="#processor-parameters">Processor Parameters</a></li>
</ul>
</li>
</ul>
</li>
</ul>

          </div>
        </div>
      </div>
      
      
    </aside>
  </div>
</div><script src="../_static/jquery.js?v=5d32c60e"></script>
    <script src="../_static/_sphinx_javascript_frameworks_compat.js?v=2cd50e6c"></script>
    <script src="../_static/documentation_options.js?v=5929fcd5"></script>
    <script src="../_static/doctools.js?v=9a2dae69"></script>
    <script src="../_static/sphinx_highlight.js?v=dc90522c"></script>
    <script src="../_static/scripts/furo.js?v=5fa4622c"></script>
    <script async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    </body>
</html>